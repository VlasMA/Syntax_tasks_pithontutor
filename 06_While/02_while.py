# 2. Инструкции управления циклом
# После тела цикла можно написать слово else:
# и после него блок операций, который будет выполнен один раз после окончания цикла, 
# когда проверяемое условие станет неверно:
i = 1
while i <= 10:
    print(i)
    i += 1
else:
    print('Цикл окончен, i =', i)

# Казалось бы, никакого смысла в этом нет, ведь эту же инструкцию можно просто написать после окончания цикла.
#  Смысл появляется только вместе с инструкцией break. 
# Если во время выполнения Питон встречает инструкцию break внутри цикла, 
# то он сразу же прекращает выполнение этого цикла и выходит из него. При этом ветка else исполняться не будет. 
# Разумеется, инструкцию break осмыленно вызывать только внутри инструкции if,
#  то есть она должна выполняться только при выполнении какого-то особенного условия.

# Приведем пример программы, которая считывает числа до тех пор, пока не встретит отрицательное число.
#  При появлении отрицательного числа программа завершается.
#  В первом варианте последовательность чисел завершается числом 0 (при считывании которого надо остановиться).

a = int(input())
while a != 0:
    if a < 0:
        print('Встретилось отрицательное число', a)
        break
    a = int(input())
else:
    print('Ни одного отрицательного числа не встретилось')

# Во втором варианте программы сначала на вход подается количество элементов последовательности,
#  а затем и сами элементы. В таком случае удобно воспользоваться циклом for.
#  Цикл for также может иметь ветку else и содержать инструкции break внутри себя.

n = int(input())
for i in range(n):
    a = int(input())
    if a < 0:
        print('Встретилось отрицательное число', a)
        break    
else:
    print('Ни одного отрицательного числа не встретилось')

# Другая инструкция управления циклом — continue (продолжение цикла).
#  Если эта инструкция встречается где-то посередине цикла,
#  то пропускаются все оставшиеся инструкции до конца цикла, 
# и исполнение цикла продолжается со следующей итерации.

# Если инструкции break и continue содержатся внутри нескольких вложенных циклов, 
# то они влияют лишь на исполнение самого внутреннего цикла. 
# Вот не самый интеллектуальный пример, который это демонстрирует:

for i in range(3):
    for j in range(5):
        if j > i:
            break
        print(i, j)

# Увлечение инструкциями break и continue не поощряется, если можно обойтись без их использования.
#  Вот типичный пример плохого использования инструкции break (данный код считает количество знаков в числе).

n = int(input())
length = 0
while True:
    length += 1
    n //= 10
    if n == 0:
        break
print('Длина числа равна', length)

# Гораздо лучше переписать этот цикл так:
n = int(input())
length = 0
while n != 0:
    length += 1
    n //= 10
print('Длина числа равна', length)

# лучше вообще так
n = int(input())
print('Длина числа равна', len(str(n)))

