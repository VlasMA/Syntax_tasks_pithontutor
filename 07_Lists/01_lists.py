                                                            # 1. Списки

# Для хранения таких данных можно использовать структуру данных,
# называемую в Питоне список (в большинстве же языков программирования используется другой термин “массив”). 
# Список представляет собой последовательность элементов, пронумерованных от 0, как символы в строке.
# Список можно задать перечислением элементов списка в квадратных скобках, например, список можно задать так:

Primes = [2, 3, 5, 7, 11, 13]
Rainbow = ['Red', 'Orange', 'Yellow', 'Green', 'Blue', 'Indigo', 'Violet']


# Также как и символы в строке, элементы списка можно индексировать отрицательными числами с конца, например,
#  Primes[-1] == 13, Primes[-6] == 2.

# Длину списка, то есть количество элементов в нем, можно узнать при помощи функции len, например, 
print(len(Primes))



# В отличие от строк, элементы списка можно изменять, присваивая им новые значения.
Rainbow = ['Red', 'Orange', 'Yellow', 'Green', 'Blue', 'Indigo', 'Violet']
print(Rainbow[0])
Rainbow[0] = 'красный'

print('Выведем радугу')
for i in range(len(Rainbow)):
    print(Rainbow[i])




# Рассмотрим несколько способов создания и считывания списков. 
# Прежде всего, можно создать пустой список (не содержащий элементов, длины 0), 
# а в конец списка можно добавлять элементы при помощи метода append. Например,
#  пусть программа получает на вход количество элементов в списке n, а потом n элементов списка по одному в отдельной строке.
#  Вот пример входных данных в таком формате:

# a = []  # заводим пустой список
# n = int(input())  # считываем количество элемент в списке
# for i in range(n):  # заполняем список
#     a.append(int(input()))
# print(a)


# В этом примере создается пустой список, далее считывается количество элементов в списке,
#  затем по одному считываются элементы списка и добавляются в его конец. 
# То же самое можно записать, сэкономив переменную n:

a = []
for i in range(int(input())):
    a.append(int(input()))
print(a)



# Для списков целиком определены следующие операции: конкатенация списков
# (сложение списков, т. е. приписывание к одному списку другого) 
# и повторение списков (умножение списка на число). Например:

a = [1, 2, 3]
b = [4, 5]
c = a + b
print(c)
d = b * 3
print(d)
print([7, 8] + [9])
print([0, 1] * 3)



# В результате список c будет равен [1, 2, 3, 4, 5], а список d будет равен [4, 5, 4, 5, 4, 5].
#  Это позволяет по-другому организовать процесс считывания списков:
#  сначала считать размер списка и создать список из нужного числа элементов,
#  затем организовать цикл по переменной i начиная с числа 0 и внутри цикла считывается i-й элемент списка:

a = [0] * int(input())
for i in range(len(a)):
    a[i] = int(input())



# Вывести элементы списка a можно одной инструкцией print(a), 
# при этом будут выведены квадратные скобки вокруг элементов списка и запятые между элементами списка. 
# Такой вывод неудобен, чаще требуется просто вывести все элементы списка в одну строку или по одному элементу в строке.
#  Приведем два примера, также отличающиеся организацией цикла:


# вывод элементов в столбец
a = [1, 2, 3, 4, 5]
for i in range(len(a)):
    print(a[i])

# вывод элементов в строку
a = [1, 2, 3, 4, 5]
for elem in a:
    print(elem, end=' ')


# Приведем пример, демонстрирующий использование цикла for в ситуации, 
# когда из строки надо выбрать все цифры и сложить их в массив как числа.

# дано: s = 'ab12c59p7dq'
# надо: извлечь цифры в список digits,
# чтобы стало так:
# digits == [1, 2, 5, 9, 7]

s = 'ab12c59p7dq'
digits = []
for symbol in s:
    if '1234567890'.find(symbol) != -1:
        digits.append(int(symbol))
print(digits)